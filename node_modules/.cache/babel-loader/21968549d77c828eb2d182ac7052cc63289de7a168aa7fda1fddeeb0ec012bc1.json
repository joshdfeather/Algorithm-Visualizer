{"ast":null,"code":"var _jsxFileName = \"/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Dijkstras from \"./Dijkstras\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const rows = 20;\n  const cols = 20;\n  const START_NODE = [9, 9];\n  const END_NODE = [0, 0];\n  const createGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === START_NODE[0] && col === START_NODE[1],\n          isEnd: row === END_NODE[0] && col === END_NODE[1],\n          isVisited: false,\n          isPath: false,\n          visitedStep: null // Initialize visitedStep\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  const [grid, setGrid] = useState(createGrid());\n  const startDijkstras = () => {\n    Dijkstras(grid, START_NODE, END_NODE, setGrid);\n  };\n  const resetBoard = () => {\n    setGrid(createGrid());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfinding Algorithm Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDijkstras,\n        children: \"Start Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDijkstras,\n        children: \"Start A Star Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetBoard,\n        children: \"Reset Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((node, nodeIdx) => {\n          const nodeShade = node.visitedStep !== null ? 255 - node.visitedStep * 10 : 255;\n          const visitedColor = `rgb(0, ${nodeShade}, 255)`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `node \n                    ${node.isStart ? \"start\" : \"\"} \n                    ${node.isEnd ? \"end\" : \"\"} \n                    ${!node.isStart && !node.isEnd && node.isVisited ? \"visited\" : \"\"} \n                    ${node.isPath ? \"path\" : \"\"}`,\n            style: {\n              backgroundColor: !node.isStart && !node.isEnd && node.isVisited ? visitedColor : \"\"\n            }\n          }, nodeIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"k45KhAHyeMFCAVfeZZDkYL+FetI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Dijkstras","jsxDEV","_jsxDEV","App","_s","rows","cols","START_NODE","END_NODE","createGrid","grid","row","currentRow","col","push","isStart","isEnd","isVisited","isPath","visitedStep","setGrid","startDijkstras","resetBoard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","rowIdx","node","nodeIdx","nodeShade","visitedColor","style","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Dijkstras from \"./Dijkstras\";\n\nfunction App() {\n  const rows = 20;\n  const cols = 20;\n  const START_NODE = [9, 9];\n  const END_NODE = [0, 0];\n\n  const createGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === START_NODE[0] && col === START_NODE[1],\n          isEnd: row === END_NODE[0] && col === END_NODE[1],\n          isVisited: false,\n          isPath: false,\n          visitedStep: null, // Initialize visitedStep\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const [grid, setGrid] = useState(createGrid());\n\n  const startDijkstras = () => {\n    Dijkstras(grid, START_NODE, END_NODE, setGrid);\n  };\n\n  const resetBoard = () => {\n    setGrid(createGrid());\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Pathfinding Algorithm Visualizer</h1>\n      <div className=\"buttons\">\n        <button onClick={startDijkstras}>Start Dijkstra's Algorithm</button>\n        <button onClick={startDijkstras}>Start A Star Algorithm</button>\n        <button onClick={resetBoard}>Reset Board</button>\n      </div>\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"grid-row\">\n            {row.map((node, nodeIdx) => {\n              const nodeShade =\n                node.visitedStep !== null ? 255 - node.visitedStep * 10 : 255;\n              const visitedColor = `rgb(0, ${nodeShade}, 255)`;\n\n              return (\n                <div\n                  key={nodeIdx}\n                  className={`node \n                    ${node.isStart ? \"start\" : \"\"} \n                    ${node.isEnd ? \"end\" : \"\"} \n                    ${\n                      !node.isStart && !node.isEnd && node.isVisited\n                        ? \"visited\"\n                        : \"\"\n                    } \n                    ${node.isPath ? \"path\" : \"\"}`}\n                  style={{\n                    backgroundColor:\n                      !node.isStart && !node.isEnd && node.isVisited\n                        ? visitedColor\n                        : \"\",\n                  }}\n                ></div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}