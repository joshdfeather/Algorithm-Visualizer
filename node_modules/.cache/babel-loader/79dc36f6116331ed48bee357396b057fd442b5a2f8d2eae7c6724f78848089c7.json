{"ast":null,"code":"const Dijkstras = (grid, startNode, endNode, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some(n => n[0] === neighbor[0] && n[1] === neighbor[1])) openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n    return pathLength;\n  }\n  step();\n};\n_c = Dijkstras;\nvar _c;\n$RefreshReg$(_c, \"Dijkstras\");","map":{"version":3,"names":["Dijkstras","grid","startNode","endNode","onComplete","rows","length","cols","openSet","cameFrom","gScore","metrics","pathLength","nodesVisited","row","col","Infinity","step","reconstructPath","currentNode","shift","newGrid","slice","isVisited","setGrid","getNeighbors","forEach","neighbor","tentativeGScore","some","n","push","setTimeout","map","node","isPath","toString","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/Dijkstras.js"],"sourcesContent":["const Dijkstras = (grid, startNode, endNode, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let metrics = { pathLength: 0, nodesVisited: 0 };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some((n) => n[0] === neighbor[0] && n[1] === neighbor[1]))\n          openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n    return pathLength;\n  }\n\n  step();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}