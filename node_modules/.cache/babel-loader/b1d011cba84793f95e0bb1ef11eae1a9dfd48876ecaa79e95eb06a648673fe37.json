{"ast":null,"code":"const getNeighbors = node => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst heuristic = (a, b) => {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n};\nexport default function aStarAnimated(grid, setGrid, startNode, endNode) {\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  function step() {\n    if (openSet.length === 0) return;\n    openSet.sort((a, b) => fScore[a] - fScore[b]);\n    let currentNode = openSet.shift();\n    if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n      reconstructPath(cameFrom, currentNode);\n      return;\n    }\n    getNeighbors(currentNode).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (!gScore[neighbor] || tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, currentNode) {\n    const newGrid = grid.slice();\n    const path = [currentNode];\n    while (cameFrom[currentNode]) {\n      currentNode = cameFrom[currentNode];\n      path.unshift(currentNode);\n      newGrid[currentNode[0]][currentNode[1]].isPath = true;\n    }\n    setGrid(newGrid);\n  }\n  step();\n}","map":{"version":3,"names":["getNeighbors","node","row","col","neighbors","push","rows","cols","heuristic","a","b","Math","abs","aStarAnimated","grid","setGrid","startNode","endNode","openSet","cameFrom","gScore","fScore","step","length","sort","currentNode","shift","reconstructPath","forEach","neighbor","tentativeGScore","includes","newGrid","slice","isVisited","setTimeout","path","unshift","isPath"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/aStarAnimated.js"],"sourcesContent":["const getNeighbors = (node) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\nconst heuristic = (a, b) => {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n};\n\nexport default function aStarAnimated(grid, setGrid, startNode, endNode) {\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  function step() {\n    if (openSet.length === 0) return;\n\n    openSet.sort((a, b) => fScore[a] - fScore[b]);\n    let currentNode = openSet.shift();\n\n    if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n      reconstructPath(cameFrom, currentNode);\n      return;\n    }\n\n    getNeighbors(currentNode).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (!gScore[neighbor] || tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, currentNode) {\n    const newGrid = grid.slice();\n    const path = [currentNode];\n    while (cameFrom[currentNode]) {\n      currentNode = cameFrom[currentNode];\n      path.unshift(currentNode);\n      newGrid[currentNode[0]][currentNode[1]].isPath = true;\n    }\n    setGrid(newGrid);\n  }\n\n  step();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}