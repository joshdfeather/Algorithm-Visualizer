{"ast":null,"code":"var _jsxFileName = \"/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Dijkstras from \"./Dijkstras\";\nimport AStar from \"./AStar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const rows = 20;\n  const cols = 20;\n  const [startNode, setStartNode] = useState([9, 9]);\n  const [endNode, setEndNode] = useState([0, 0]);\n  const [draggingNodeType, setDraggingNodeType] = useState(null);\n  const [grid, setGrid] = useState(createGrid());\n  const [algorithmToRun, setAlgorithmToRun] = useState(\"\");\n  const [running, setRunning] = useState(false);\n\n  // Create a new grid based on the start and end node positions\n  function createGrid() {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === startNode[0] && col === startNode[1],\n          isEnd: row === endNode[0] && col === endNode[1],\n          isVisited: false,\n          isPath: false\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n  const resetBoard = () => {\n    if (!running) {\n      setGrid(createGrid());\n      setAlgorithmToRun(\"\"); // Clear algorithm selection\n    }\n  };\n  const handleAlgorithmChange = event => {\n    setAlgorithmToRun(event.target.value);\n  };\n\n  // Run the selected algorithm\n  useEffect(() => {\n    if (algorithmToRun && !running) {\n      setRunning(true);\n      const newGrid = createGrid();\n      setGrid(newGrid);\n      if (algorithmToRun === \"dijkstra\") {\n        Dijkstras(newGrid, startNode, endNode, setGrid, () => {\n          setRunning(false);\n          setAlgorithmToRun(\"\"); // Clear algorithm selection\n        });\n      } else if (algorithmToRun === \"astar\") {\n        AStar(newGrid, startNode, endNode, setGrid, () => {\n          setRunning(false);\n          setAlgorithmToRun(\"\"); // Clear algorithm selection\n        });\n      }\n    }\n  }, [algorithmToRun]);\n  const handleMouseDown = nodeType => {\n    setDraggingNodeType(nodeType);\n  };\n  const handleMouseUp = () => {\n    setDraggingNodeType(null);\n  };\n  const handleMouseEnter = (row, col) => {\n    if (draggingNodeType === \"start\") {\n      setStartNode([row, col]);\n    } else if (draggingNodeType === \"end\") {\n      setEndNode([row, col]);\n    }\n  };\n  useEffect(() => {\n    // Update the grid whenever the start or end node changes\n    setGrid(createGrid());\n  }, [startNode, endNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfinding Algorithm Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleAlgorithmChange,\n        value: algorithmToRun,\n        disabled: running,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"dijkstra\",\n          children: \"Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"astar\",\n          children: \"A* Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetBoard,\n        disabled: running,\n        children: \"Reset Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      onMouseUp: handleMouseUp,\n      children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${!node.isStart && !node.isEnd && node.isVisited ? \"visited\" : \"\"} \n                  ${node.isPath ? \"path\" : \"\"}`,\n          onMouseDown: () => node.isStart ? handleMouseDown(\"start\") : node.isEnd ? handleMouseDown(\"end\") : null,\n          onMouseEnter: () => handleMouseEnter(node.row, node.col)\n        }, nodeIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sqa66rwcywFBf85gdm61Z3hQ0/k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dijkstras","AStar","jsxDEV","_jsxDEV","App","_s","rows","cols","startNode","setStartNode","endNode","setEndNode","draggingNodeType","setDraggingNodeType","grid","setGrid","createGrid","algorithmToRun","setAlgorithmToRun","running","setRunning","row","currentRow","col","push","isStart","isEnd","isVisited","isPath","resetBoard","handleAlgorithmChange","event","target","value","newGrid","handleMouseDown","nodeType","handleMouseUp","handleMouseEnter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","onClick","onMouseUp","map","rowIdx","node","nodeIdx","onMouseDown","onMouseEnter","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Dijkstras from \"./Dijkstras\";\nimport AStar from \"./AStar\";\n\nfunction App() {\n  const rows = 20;\n  const cols = 20;\n  const [startNode, setStartNode] = useState([9, 9]);\n  const [endNode, setEndNode] = useState([0, 0]);\n  const [draggingNodeType, setDraggingNodeType] = useState(null);\n  const [grid, setGrid] = useState(createGrid());\n  const [algorithmToRun, setAlgorithmToRun] = useState(\"\");\n  const [running, setRunning] = useState(false);\n\n  // Create a new grid based on the start and end node positions\n  function createGrid() {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === startNode[0] && col === startNode[1],\n          isEnd: row === endNode[0] && col === endNode[1],\n          isVisited: false,\n          isPath: false,\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  const resetBoard = () => {\n    if (!running) {\n      setGrid(createGrid());\n      setAlgorithmToRun(\"\"); // Clear algorithm selection\n    }\n  };\n\n  const handleAlgorithmChange = (event) => {\n    setAlgorithmToRun(event.target.value);\n  };\n\n  // Run the selected algorithm\n  useEffect(() => {\n    if (algorithmToRun && !running) {\n      setRunning(true);\n      const newGrid = createGrid();\n      setGrid(newGrid);\n\n      if (algorithmToRun === \"dijkstra\") {\n        Dijkstras(newGrid, startNode, endNode, setGrid, () => {\n          setRunning(false);\n          setAlgorithmToRun(\"\"); // Clear algorithm selection\n        });\n      } else if (algorithmToRun === \"astar\") {\n        AStar(newGrid, startNode, endNode, setGrid, () => {\n          setRunning(false);\n          setAlgorithmToRun(\"\"); // Clear algorithm selection\n        });\n      }\n    }\n  }, [algorithmToRun]);\n\n  const handleMouseDown = (nodeType) => {\n    setDraggingNodeType(nodeType);\n  };\n\n  const handleMouseUp = () => {\n    setDraggingNodeType(null);\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (draggingNodeType === \"start\") {\n      setStartNode([row, col]);\n    } else if (draggingNodeType === \"end\") {\n      setEndNode([row, col]);\n    }\n  };\n\n  useEffect(() => {\n    // Update the grid whenever the start or end node changes\n    setGrid(createGrid());\n  }, [startNode, endNode]);\n\n  return (\n    <div className=\"App\">\n      <h1>Pathfinding Algorithm Visualizer</h1>\n      <div className=\"buttons\">\n        <select\n          onChange={handleAlgorithmChange}\n          value={algorithmToRun}\n          disabled={running}\n        >\n          <option value=\"\" disabled>\n            Select Algorithm\n          </option>\n          <option value=\"dijkstra\">Dijkstra's Algorithm</option>\n          <option value=\"astar\">A* Algorithm</option>\n        </select>\n        <button onClick={resetBoard} disabled={running}>\n          Reset Board\n        </button>\n      </div>\n      <div className=\"grid\" onMouseUp={handleMouseUp}>\n        {grid.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"grid-row\">\n            {row.map((node, nodeIdx) => (\n              <div\n                key={nodeIdx}\n                className={`node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${\n                    !node.isStart && !node.isEnd && node.isVisited\n                      ? \"visited\"\n                      : \"\"\n                  } \n                  ${node.isPath ? \"path\" : \"\"}`}\n                onMouseDown={() =>\n                  node.isStart\n                    ? handleMouseDown(\"start\")\n                    : node.isEnd\n                    ? handleMouseDown(\"end\")\n                    : null\n                }\n                onMouseEnter={() => handleMouseEnter(node.row, node.col)}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}