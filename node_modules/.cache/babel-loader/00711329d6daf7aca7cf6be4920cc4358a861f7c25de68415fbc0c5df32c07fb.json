{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst AStar = (grid, startNode, endNode, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    // Find the node with the lowest fScore in the open set\n    let currentNode = openSet.reduce((bestNode, node) => {\n      return fScore[node] < fScore[bestNode] ? node : bestNode;\n    });\n    if (currentNode.toString() === endNode.toString()) {\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n    openSet = openSet.filter(node => node.toString() !== currentNode.toString());\n\n    // Visualize the current node\n    const newGrid = grid.map((row, rowIdx) => row.map((node, colIdx) => {\n      if (node.row === currentNode[0] && node.col === currentNode[1]) {\n        return {\n          ...node,\n          isVisited: true\n        };\n      }\n      return node;\n    }));\n    metrics.nodesVisited++;\n    // Update the grid with visited nodes\n    if (onComplete) onComplete(newGrid, metrics); // Pass the updated grid and metrics to the callback\n\n    // Explore neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n        if (!openSet.some(n => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    // Update the grid with the final path\n    return pathLength;\n  }\n  function heuristic(node, endNode) {\n    const [x1, y1] = node;\n    const [x2, y2] = endNode;\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2); // Manhattan distance\n  }\n  step();\n};\n_c = AStar;\nvar _c;\n$RefreshReg$(_c, \"AStar\");","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","AStar","grid","startNode","endNode","onComplete","length","openSet","cameFrom","gScore","fScore","metrics","pathLength","nodesVisited","Infinity","heuristic","step","reconstructPath","currentNode","reduce","bestNode","toString","filter","newGrid","map","rowIdx","colIdx","isVisited","forEach","neighbor","tentativeGScore","some","n","setTimeout","isPath","x1","y1","x2","y2","Math","abs","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/AStar.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\nconst AStar = (grid, startNode, endNode, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let metrics = { pathLength: 0, nodesVisited: 0 };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    // Find the node with the lowest fScore in the open set\n    let currentNode = openSet.reduce((bestNode, node) => {\n      return fScore[node] < fScore[bestNode] ? node : bestNode;\n    });\n\n    if (currentNode.toString() === endNode.toString()) {\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    openSet = openSet.filter(\n      (node) => node.toString() !== currentNode.toString()\n    );\n\n    // Visualize the current node\n    const newGrid = grid.map((row, rowIdx) =>\n      row.map((node, colIdx) => {\n        if (node.row === currentNode[0] && node.col === currentNode[1]) {\n          return { ...node, isVisited: true };\n        }\n        return node;\n      })\n    );\n    metrics.nodesVisited++;\n    // Update the grid with visited nodes\n    if (onComplete) onComplete(newGrid, metrics); // Pass the updated grid and metrics to the callback\n\n    // Explore neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n\n        if (!openSet.some((n) => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    // Update the grid with the final path\n    return pathLength;\n  }\n\n  function heuristic(node, endNode) {\n    const [x1, y1] = node;\n    const [x2, y2] = endNode;\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2); // Manhattan distance\n  }\n\n  step();\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACzC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGJ,IAAI;EACvB,MAAMK,SAAS,GAAG,EAAE;EACpB,IAAIF,GAAG,GAAG,CAAC,EAAEE,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;EAC3C,IAAID,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEI,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;EAClD,IAAIA,GAAG,GAAG,CAAC,EAAEC,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3C,IAAIA,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEG,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAClD,OAAOC,SAAS;AAClB,CAAC;AAED,MAAME,KAAK,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,KAAK;EACtD,MAAMV,IAAI,GAAGO,IAAI,CAACI,MAAM;EACxB,MAAMV,IAAI,GAAGM,IAAI,CAAC,CAAC,CAAC,CAACI,MAAM;EAE3B,IAAIC,OAAO,GAAG,CAACJ,SAAS,CAAC;EACzB,IAAIK,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,OAAO,GAAG;IAAEC,UAAU,EAAE,CAAC;IAAEC,YAAY,EAAE;EAAE,CAAC;;EAEhD;EACA,KAAK,IAAIhB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;MACnCW,MAAM,CAAC,CAACZ,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGgB,QAAQ;MAC7BJ,MAAM,CAAC,CAACb,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGgB,QAAQ;IAC/B;EACF;EACAL,MAAM,CAACN,SAAS,CAAC,GAAG,CAAC;EACrBO,MAAM,CAACP,SAAS,CAAC,GAAGY,SAAS,CAACZ,SAAS,EAAEC,OAAO,CAAC;EAEjD,SAASY,IAAIA,CAAA,EAAG;IACd,IAAIT,OAAO,CAACD,MAAM,KAAK,CAAC,EAAE;MACxB;MACAK,OAAO,CAACC,UAAU,GAAGK,eAAe,CAACT,QAAQ,EAAEL,SAAS,EAAEC,OAAO,EAAEF,IAAI,CAAC;MACxE,IAAIG,UAAU,EAAEA,UAAU,CAACH,IAAI,EAAES,OAAO,CAAC,CAAC,CAAC;MAC3C;IACF;;IAEA;IACA,IAAIO,WAAW,GAAGX,OAAO,CAACY,MAAM,CAAC,CAACC,QAAQ,EAAE1B,IAAI,KAAK;MACnD,OAAOgB,MAAM,CAAChB,IAAI,CAAC,GAAGgB,MAAM,CAACU,QAAQ,CAAC,GAAG1B,IAAI,GAAG0B,QAAQ;IAC1D,CAAC,CAAC;IAEF,IAAIF,WAAW,CAACG,QAAQ,CAAC,CAAC,KAAKjB,OAAO,CAACiB,QAAQ,CAAC,CAAC,EAAE;MACjDV,OAAO,CAACC,UAAU,GAAGK,eAAe,CAACT,QAAQ,EAAEL,SAAS,EAAEC,OAAO,EAAEF,IAAI,CAAC;MACxE,IAAIG,UAAU,EAAEA,UAAU,CAACH,IAAI,EAAES,OAAO,CAAC,CAAC,CAAC;MAC3C;IACF;IAEAJ,OAAO,GAAGA,OAAO,CAACe,MAAM,CACrB5B,IAAI,IAAKA,IAAI,CAAC2B,QAAQ,CAAC,CAAC,KAAKH,WAAW,CAACG,QAAQ,CAAC,CACrD,CAAC;;IAED;IACA,MAAME,OAAO,GAAGrB,IAAI,CAACsB,GAAG,CAAC,CAAC3B,GAAG,EAAE4B,MAAM,KACnC5B,GAAG,CAAC2B,GAAG,CAAC,CAAC9B,IAAI,EAAEgC,MAAM,KAAK;MACxB,IAAIhC,IAAI,CAACG,GAAG,KAAKqB,WAAW,CAAC,CAAC,CAAC,IAAIxB,IAAI,CAACI,GAAG,KAAKoB,WAAW,CAAC,CAAC,CAAC,EAAE;QAC9D,OAAO;UAAE,GAAGxB,IAAI;UAAEiC,SAAS,EAAE;QAAK,CAAC;MACrC;MACA,OAAOjC,IAAI;IACb,CAAC,CACH,CAAC;IACDiB,OAAO,CAACE,YAAY,EAAE;IACtB;IACA,IAAIR,UAAU,EAAEA,UAAU,CAACkB,OAAO,EAAEZ,OAAO,CAAC,CAAC,CAAC;;IAE9C;IACAlB,YAAY,CAACyB,WAAW,EAAEvB,IAAI,EAAEC,IAAI,CAAC,CAACgC,OAAO,CAAEC,QAAQ,IAAK;MAC1D,IAAIC,eAAe,GAAGrB,MAAM,CAACS,WAAW,CAAC,GAAG,CAAC;MAE7C,IAAIY,eAAe,GAAGrB,MAAM,CAACoB,QAAQ,CAAC,EAAE;QACtCrB,QAAQ,CAACqB,QAAQ,CAAC,GAAGX,WAAW;QAChCT,MAAM,CAACoB,QAAQ,CAAC,GAAGC,eAAe;QAClCpB,MAAM,CAACmB,QAAQ,CAAC,GAAGpB,MAAM,CAACoB,QAAQ,CAAC,GAAGd,SAAS,CAACc,QAAQ,EAAEzB,OAAO,CAAC;QAElE,IAAI,CAACG,OAAO,CAACwB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACX,QAAQ,CAAC,CAAC,KAAKQ,QAAQ,CAACR,QAAQ,CAAC,CAAC,CAAC,EAAE;UAC9Dd,OAAO,CAACP,IAAI,CAAC6B,QAAQ,CAAC;QACxB;MACF;IACF,CAAC,CAAC;IAEFI,UAAU,CAACjB,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;EACxB;EAEA,SAASC,eAAeA,CAACT,QAAQ,EAAEL,SAAS,EAAEC,OAAO,EAAEF,IAAI,EAAE;IAC3D,IAAIgB,WAAW,GAAGd,OAAO;IACzB,MAAMmB,OAAO,GAAGrB,IAAI,CAACsB,GAAG,CAAE3B,GAAG,IAC3BA,GAAG,CAAC2B,GAAG,CAAE9B,IAAI,KAAM;MACjB,GAAGA,IAAI;MACPwC,MAAM,EAAE;IACV,CAAC,CAAC,CACJ,CAAC;IACD,IAAItB,UAAU,GAAG,CAAC;IAClB,OAAOM,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,CAAC,KAAKlB,SAAS,CAACkB,QAAQ,CAAC,CAAC,EAAE;MACrE,IAAIH,WAAW,KAAKd,OAAO,EAAE;QAC3BmB,OAAO,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACgB,MAAM,GAAG,IAAI;QACrDtB,UAAU,EAAE;MACd;MACAM,WAAW,GAAGV,QAAQ,CAACU,WAAW,CAAC;IACrC;IACA;IACA,OAAON,UAAU;EACnB;EAEA,SAASG,SAASA,CAACrB,IAAI,EAAEU,OAAO,EAAE;IAChC,MAAM,CAAC+B,EAAE,EAAEC,EAAE,CAAC,GAAG1C,IAAI;IACrB,MAAM,CAAC2C,EAAE,EAAEC,EAAE,CAAC,GAAGlC,OAAO;IACxB,OAAOmC,IAAI,CAACC,GAAG,CAACL,EAAE,GAAGE,EAAE,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACJ,EAAE,GAAGE,EAAE,CAAC,CAAC,CAAC;EAChD;EAEAtB,IAAI,CAAC,CAAC;AACR,CAAC;AAACyB,EAAA,GArGIxC,KAAK;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}