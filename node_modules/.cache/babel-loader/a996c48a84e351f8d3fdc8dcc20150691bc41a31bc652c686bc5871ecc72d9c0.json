{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n\n  // Move up\n  if (row > 0) neighbors.push([row - 1, col]);\n\n  // Move down\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n\n  // Move left\n  if (col > 0) neighbors.push([row, col - 1]);\n\n  // Move right\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst dijkstra = (grid, startNode, setGrid) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  function step() {\n    if (openSet.length === 0) return;\n    let currentNode = openSet.shift();\n\n    // Visualize the current node\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  step();\n};\nexport default dijkstra;","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","dijkstra","grid","startNode","setGrid","length","openSet","cameFrom","gScore","Infinity","step","currentNode","shift","newGrid","slice","isVisited","forEach","neighbor","tentativeGScore","includes","setTimeout"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/Dijkstras.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n\n  // Move up\n  if (row > 0) neighbors.push([row - 1, col]);\n\n  // Move down\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n\n  // Move left\n  if (col > 0) neighbors.push([row, col - 1]);\n\n  // Move right\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n\n  return neighbors;\n};\n\nconst dijkstra = (grid, startNode, setGrid) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n\n  gScore[startNode] = 0;\n\n  function step() {\n    if (openSet.length === 0) return;\n\n    let currentNode = openSet.shift();\n\n    // Visualize the current node\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n\n    setTimeout(step, 50); // Animation delay\n  }\n\n  step();\n};\n\nexport default dijkstra;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACzC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGJ,IAAI;EACvB,MAAMK,SAAS,GAAG,EAAE;;EAEpB;EACA,IAAIF,GAAG,GAAG,CAAC,EAAEE,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;;EAE3C;EACA,IAAID,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEI,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;;EAElD;EACA,IAAIA,GAAG,GAAG,CAAC,EAAEC,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;;EAE3C;EACA,IAAIA,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEG,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAElD,OAAOC,SAAS;AAClB,CAAC;AAED,MAAME,QAAQ,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,KAAK;EAC7C,MAAMT,IAAI,GAAGO,IAAI,CAACG,MAAM;EACxB,MAAMT,IAAI,GAAGM,IAAI,CAAC,CAAC,CAAC,CAACG,MAAM;EAE3B,IAAIC,OAAO,GAAG,CAACH,SAAS,CAAC;EACzB,IAAII,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,KAAK,IAAIX,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;MACnCU,MAAM,CAAC,CAACX,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGW,QAAQ;IAC/B;EACF;EAEAD,MAAM,CAACL,SAAS,CAAC,GAAG,CAAC;EAErB,SAASO,IAAIA,CAAA,EAAG;IACd,IAAIJ,OAAO,CAACD,MAAM,KAAK,CAAC,EAAE;IAE1B,IAAIM,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAC,CAAC;;IAEjC;IACA,MAAMC,OAAO,GAAGX,IAAI,CAACY,KAAK,CAAC,CAAC;IAC5BD,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACI,SAAS,GAAG,IAAI;IACxDX,OAAO,CAACS,OAAO,CAAC;;IAEhB;IACApB,YAAY,CAACkB,WAAW,EAAEhB,IAAI,EAAEC,IAAI,CAAC,CAACoB,OAAO,CAAEC,QAAQ,IAAK;MAC1D,IAAIC,eAAe,GAAGV,MAAM,CAACG,WAAW,CAAC,GAAG,CAAC;MAE7C,IAAIO,eAAe,GAAGV,MAAM,CAACS,QAAQ,CAAC,EAAE;QACtCV,QAAQ,CAACU,QAAQ,CAAC,GAAGN,WAAW;QAChCH,MAAM,CAACS,QAAQ,CAAC,GAAGC,eAAe;QAClC,IAAI,CAACZ,OAAO,CAACa,QAAQ,CAACF,QAAQ,CAAC,EAAEX,OAAO,CAACN,IAAI,CAACiB,QAAQ,CAAC;MACzD;IACF,CAAC,CAAC;IAEFG,UAAU,CAACV,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;EACxB;EAEAA,IAAI,CAAC,CAAC;AACR,CAAC;AAED,eAAeT,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}