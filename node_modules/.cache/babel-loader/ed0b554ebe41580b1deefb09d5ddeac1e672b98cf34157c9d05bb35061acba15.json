{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n\n  // Move up\n  if (row > 0) neighbors.push([row - 1, col]);\n\n  // Move down\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n\n  // Move left\n  if (col > 0) neighbors.push([row, col - 1]);\n\n  // Move right\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst Dijkstras = (grid, startNode, endNode, setGrid) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  function heuristic(a, b) {\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n  }\n  function step() {\n    if (openSet.length === 0) return;\n\n    // Sort by lowest fScore\n    openSet.sort((a, b) => fScore[a] - fScore[b]);\n    let currentNode = openSet.shift();\n\n    // Visualize the current node\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n    if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n      reconstructPath(cameFrom, currentNode);\n      return;\n    }\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, currentNode) {\n    const newGrid = grid.slice();\n    while (cameFrom[currentNode]) {\n      currentNode = cameFrom[currentNode];\n      newGrid[currentNode[0]][currentNode[1]].isPath = true;\n    }\n    setGrid(newGrid);\n  }\n  step();\n};\n_c = Dijkstras;\nexport default Dijkstras;\nvar _c;\n$RefreshReg$(_c, \"Dijkstras\");","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","Dijkstras","grid","startNode","endNode","setGrid","length","openSet","cameFrom","gScore","fScore","Infinity","heuristic","a","b","Math","abs","step","sort","currentNode","shift","newGrid","slice","isVisited","reconstructPath","forEach","neighbor","tentativeGScore","includes","setTimeout","isPath","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/Dijkstras.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n\n  // Move up\n  if (row > 0) neighbors.push([row - 1, col]);\n\n  // Move down\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n\n  // Move left\n  if (col > 0) neighbors.push([row, col - 1]);\n\n  // Move right\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n\n  return neighbors;\n};\n\nconst Dijkstras = (grid, startNode, endNode, setGrid) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  function heuristic(a, b) {\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n  }\n\n  function step() {\n    if (openSet.length === 0) return;\n\n    // Sort by lowest fScore\n    openSet.sort((a, b) => fScore[a] - fScore[b]);\n    let currentNode = openSet.shift();\n\n    // Visualize the current node\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n      reconstructPath(cameFrom, currentNode);\n      return;\n    }\n\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, currentNode) {\n    const newGrid = grid.slice();\n    while (cameFrom[currentNode]) {\n      currentNode = cameFrom[currentNode];\n      newGrid[currentNode[0]][currentNode[1]].isPath = true;\n    }\n    setGrid(newGrid);\n  }\n\n  step();\n};\n\nexport default Dijkstras;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}