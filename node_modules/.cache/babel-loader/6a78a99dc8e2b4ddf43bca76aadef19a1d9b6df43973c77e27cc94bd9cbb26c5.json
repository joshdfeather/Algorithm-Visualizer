{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\n// Heuristic function: Manhattan distance\nconst heuristic = (node, endNode) => {\n  const [row, col] = node;\n  const [endRow, endCol] = endNode;\n  return Math.abs(row - endRow) + Math.abs(col - endCol);\n};\nconst AStar = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0,\n    runtime: 0\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  const startTime = Date.now();\n  function step() {\n    // Find the node with the lowest fScore in the open set\n    let currentNode = openSet.reduce((bestNode, node) => {\n      return fScore[node] < fScore[bestNode] ? node : bestNode;\n    });\n    if (currentNode.toString() === endNode.toString()) {\n      const {\n        newGrid,\n        pathLength\n      } = reconstructPath(cameFrom, startNode, endNode, grid);\n      metrics.runtime = (Date.now() - startTime) / 1000; // runtime in seconds\n      metrics.pathLength = pathLength;\n      if (onComplete) onComplete(newGrid, metrics); // Signal completion\n      return;\n    }\n    openSet = openSet.filter(node => node.toString() !== currentNode.toString());\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Explore neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n        if (!openSet.some(n => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n    setTimeout(step, 20); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    return {\n      newGrid,\n      pathLength\n    };\n  }\n  step();\n};\n_c = AStar;\nexport default AStar;\nvar _c;\n$RefreshReg$(_c, \"AStar\");","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","heuristic","endNode","endRow","endCol","Math","abs","AStar","grid","startNode","setGrid","onComplete","length","openSet","cameFrom","gScore","fScore","metrics","pathLength","nodesVisited","runtime","Infinity","startTime","Date","now","step","currentNode","reduce","bestNode","toString","newGrid","reconstructPath","filter","slice","isVisited","forEach","neighbor","tentativeGScore","some","n","setTimeout","map","isPath","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/AStar.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\n// Heuristic function: Manhattan distance\nconst heuristic = (node, endNode) => {\n  const [row, col] = node;\n  const [endRow, endCol] = endNode;\n  return Math.abs(row - endRow) + Math.abs(col - endCol);\n};\n\nconst AStar = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0,\n    runtime: 0,\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  const startTime = Date.now();\n\n  function step() {\n    // Find the node with the lowest fScore in the open set\n    let currentNode = openSet.reduce((bestNode, node) => {\n      return fScore[node] < fScore[bestNode] ? node : bestNode;\n    });\n\n    if (currentNode.toString() === endNode.toString()) {\n      const { newGrid, pathLength } = reconstructPath(\n        cameFrom,\n        startNode,\n        endNode,\n        grid\n      );\n      metrics.runtime = (Date.now() - startTime) / 1000; // runtime in seconds\n      metrics.pathLength = pathLength;\n      if (onComplete) onComplete(newGrid, metrics); // Signal completion\n      return;\n    }\n\n    openSet = openSet.filter(\n      (node) => node.toString() !== currentNode.toString()\n    );\n\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Explore neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n\n        if (!openSet.some((n) => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n    setTimeout(step, 20); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    return { newGrid, pathLength };\n  }\n\n  step();\n};\n\nexport default AStar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}