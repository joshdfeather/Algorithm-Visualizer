{"ast":null,"code":"var _jsxFileName = \"/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Dijkstras from \"./Dijkstras\";\nimport AStar from \"./AStar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const rows = 20;\n  const cols = 20;\n  const [startNode, setStartNode] = useState([9, 9]);\n  const [endNode, setEndNode] = useState([0, 0]);\n  const [draggingNodeType, setDraggingNodeType] = useState(null); // To track which node is being dragged\n\n  const createGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === startNode[0] && col === startNode[1],\n          isEnd: row === endNode[0] && col === endNode[1],\n          isVisited: false,\n          isPath: false\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  const [grid, setGrid] = useState(createGrid());\n  const [algorithmToRun, setAlgorithmToRun] = useState(null);\n  const startDijkstras = () => {\n    resetBoard();\n    setAlgorithmToRun(\"dijkstra\");\n  };\n  const startAStar = () => {\n    resetBoard();\n    setAlgorithmToRun(\"astar\");\n  };\n  const resetBoard = () => {\n    setGrid(createGrid());\n  };\n\n  // Re-create grid whenever the start or end node changes\n  useEffect(() => {\n    const newGrid = createGrid();\n    setGrid(newGrid);\n\n    // Run the selected algorithm when start or end node is moved\n    if (algorithmToRun) {\n      if (algorithmToRun === \"dijkstra\") {\n        Dijkstras(newGrid, startNode, endNode, setGrid);\n        setAlgorithmToRun(null);\n      } else if (algorithmToRun === \"astar\") {\n        AStar(newGrid, startNode, endNode, setGrid);\n        setAlgorithmToRun(null);\n      }\n    }\n  }, [startNode, endNode, algorithmToRun]);\n  const handleMouseDown = nodeType => {\n    setDraggingNodeType(nodeType);\n  };\n  const handleMouseUp = () => {\n    setDraggingNodeType(null);\n  };\n  const handleMouseEnter = (row, col) => {\n    if (draggingNodeType === \"start\") {\n      setStartNode([row, col]);\n    } else if (draggingNodeType === \"end\") {\n      setEndNode([row, col]);\n    }\n  };\n  useEffect(() => {\n    setGrid(createGrid());\n  }, [startNode, endNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfinding Algorithm Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDijkstras,\n        children: \"Start Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startAStar,\n        children: \"Start A Star Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetBoard,\n        children: \"Reset Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      onMouseUp: handleMouseUp,\n      children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${!node.isStart && !node.isEnd && node.isVisited ? \"visited\" : \"\"} \n                  ${node.isPath ? \"path\" : \"\"}`,\n          onMouseDown: () => node.isStart ? handleMouseDown(\"start\") : node.isEnd ? handleMouseDown(\"end\") : null,\n          onMouseEnter: () => handleMouseEnter(node.row, node.col)\n        }, nodeIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"67RZA2xDUD9NVKDRQ+VSuVtWYJw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dijkstras","AStar","jsxDEV","_jsxDEV","App","_s","rows","cols","startNode","setStartNode","endNode","setEndNode","draggingNodeType","setDraggingNodeType","createGrid","grid","row","currentRow","col","push","isStart","isEnd","isVisited","isPath","setGrid","algorithmToRun","setAlgorithmToRun","startDijkstras","resetBoard","startAStar","newGrid","handleMouseDown","nodeType","handleMouseUp","handleMouseEnter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onMouseUp","map","rowIdx","node","nodeIdx","onMouseDown","onMouseEnter","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Dijkstras from \"./Dijkstras\";\nimport AStar from \"./AStar\";\n\nfunction App() {\n  const rows = 20;\n  const cols = 20;\n  const [startNode, setStartNode] = useState([9, 9]);\n  const [endNode, setEndNode] = useState([0, 0]);\n  const [draggingNodeType, setDraggingNodeType] = useState(null); // To track which node is being dragged\n\n  const createGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === startNode[0] && col === startNode[1],\n          isEnd: row === endNode[0] && col === endNode[1],\n          isVisited: false,\n          isPath: false,\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const [grid, setGrid] = useState(createGrid());\n  const [algorithmToRun, setAlgorithmToRun] = useState(null);\n\n  const startDijkstras = () => {\n    resetBoard();\n    setAlgorithmToRun(\"dijkstra\");\n  };\n\n  const startAStar = () => {\n    resetBoard();\n    setAlgorithmToRun(\"astar\");\n  };\n\n  const resetBoard = () => {\n    setGrid(createGrid());\n  };\n\n  // Re-create grid whenever the start or end node changes\n  useEffect(() => {\n    const newGrid = createGrid();\n    setGrid(newGrid);\n\n    // Run the selected algorithm when start or end node is moved\n    if (algorithmToRun) {\n      if (algorithmToRun === \"dijkstra\") {\n        Dijkstras(newGrid, startNode, endNode, setGrid);\n        setAlgorithmToRun(null);\n      } else if (algorithmToRun === \"astar\") {\n        AStar(newGrid, startNode, endNode, setGrid);\n        setAlgorithmToRun(null);\n      }\n    }\n  }, [startNode, endNode, algorithmToRun]);\n\n  const handleMouseDown = (nodeType) => {\n    setDraggingNodeType(nodeType);\n  };\n\n  const handleMouseUp = () => {\n    setDraggingNodeType(null);\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (draggingNodeType === \"start\") {\n      setStartNode([row, col]);\n    } else if (draggingNodeType === \"end\") {\n      setEndNode([row, col]);\n    }\n  };\n\n  useEffect(() => {\n    setGrid(createGrid());\n  }, [startNode, endNode]);\n\n  return (\n    <div className=\"App\">\n      <h1>Pathfinding Algorithm Visualizer</h1>\n      <div className=\"buttons\">\n        <button onClick={startDijkstras}>Start Dijkstra's Algorithm</button>\n        <button onClick={startAStar}>Start A Star Algorithm</button>\n        <button onClick={resetBoard}>Reset Board</button>\n      </div>\n      <div className=\"grid\" onMouseUp={handleMouseUp}>\n        {grid.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"grid-row\">\n            {row.map((node, nodeIdx) => (\n              <div\n                key={nodeIdx}\n                className={`node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${\n                    !node.isStart && !node.isEnd && node.isVisited\n                      ? \"visited\"\n                      : \"\"\n                  } \n                  ${node.isPath ? \"path\" : \"\"}`}\n                onMouseDown={() =>\n                  node.isStart\n                    ? handleMouseDown(\"start\")\n                    : node.isEnd\n                    ? handleMouseDown(\"end\")\n                    : null\n                }\n                onMouseEnter={() => handleMouseEnter(node.row, node.col)}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}