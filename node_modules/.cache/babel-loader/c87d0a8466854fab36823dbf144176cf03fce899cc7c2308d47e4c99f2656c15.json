{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\n// Heuristic function: Manhattan distance\nconst heuristic = (node, endNode) => {\n  const [row, col] = node;\n  const [endRow, endCol] = endNode;\n  return Math.abs(row - endRow) + Math.abs(col - endCol);\n};\nconst AStar = (grid, startNode, endNode, setGrid) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      reconstructPath(cameFrom, startNode, endNode);\n      return;\n    }\n\n    // Find the node with the lowest fScore in the open set\n    let currentNode = openSet.reduce((bestNode, node) => {\n      return fScore[node] < fScore[bestNode] ? node : bestNode;\n    });\n    if (currentNode.toString() === endNode.toString()) {\n      reconstructPath(cameFrom, startNode, endNode);\n      return;\n    }\n    openSet = openSet.filter(node => node.toString() !== currentNode.toString());\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    // Explore neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n        if (!openSet.some(n => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n    setTimeout(step, 20); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n  }\n  step();\n};\n_c = AStar;\nexport default AStar;\nvar _c;\n$RefreshReg$(_c, \"AStar\");","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","heuristic","endNode","endRow","endCol","Math","abs","AStar","grid","startNode","setGrid","length","openSet","cameFrom","gScore","fScore","Infinity","step","reconstructPath","currentNode","reduce","bestNode","toString","filter","newGrid","slice","isVisited","forEach","neighbor","tentativeGScore","some","n","setTimeout","map","isPath","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/AStar.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\n// Heuristic function: Manhattan distance\nconst heuristic = (node, endNode) => {\n  const [row, col] = node;\n  const [endRow, endCol] = endNode;\n  return Math.abs(row - endRow) + Math.abs(col - endCol);\n};\n\nconst AStar = (grid, startNode, endNode, setGrid) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      reconstructPath(cameFrom, startNode, endNode);\n      return;\n    }\n\n    // Find the node with the lowest fScore in the open set\n    let currentNode = openSet.reduce((bestNode, node) => {\n      return fScore[node] < fScore[bestNode] ? node : bestNode;\n    });\n\n    if (currentNode.toString() === endNode.toString()) {\n      reconstructPath(cameFrom, startNode, endNode);\n      return;\n    }\n\n    openSet = openSet.filter(\n      (node) => node.toString() !== currentNode.toString()\n    );\n\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    // Explore neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n\n        if (!openSet.some((n) => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n\n    setTimeout(step, 20); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n  }\n\n  step();\n};\n\nexport default AStar;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACzC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGJ,IAAI;EACvB,MAAMK,SAAS,GAAG,EAAE;EACpB,IAAIF,GAAG,GAAG,CAAC,EAAEE,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;EAC3C,IAAID,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEI,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;EAClD,IAAIA,GAAG,GAAG,CAAC,EAAEC,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3C,IAAIA,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEG,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAClD,OAAOC,SAAS;AAClB,CAAC;;AAED;AACA,MAAME,SAAS,GAAGA,CAACP,IAAI,EAAEQ,OAAO,KAAK;EACnC,MAAM,CAACL,GAAG,EAAEC,GAAG,CAAC,GAAGJ,IAAI;EACvB,MAAM,CAACS,MAAM,EAAEC,MAAM,CAAC,GAAGF,OAAO;EAChC,OAAOG,IAAI,CAACC,GAAG,CAACT,GAAG,GAAGM,MAAM,CAAC,GAAGE,IAAI,CAACC,GAAG,CAACR,GAAG,GAAGM,MAAM,CAAC;AACxD,CAAC;AAED,MAAMG,KAAK,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEP,OAAO,EAAEQ,OAAO,KAAK;EACnD,MAAMf,IAAI,GAAGa,IAAI,CAACG,MAAM;EACxB,MAAMf,IAAI,GAAGY,IAAI,CAAC,CAAC,CAAC,CAACG,MAAM;EAE3B,IAAIC,OAAO,GAAG,CAACH,SAAS,CAAC;EACzB,IAAII,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,KAAK,IAAIlB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;MACnCgB,MAAM,CAAC,CAACjB,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGkB,QAAQ;MAC7BD,MAAM,CAAC,CAAClB,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGkB,QAAQ;IAC/B;EACF;EACAF,MAAM,CAACL,SAAS,CAAC,GAAG,CAAC;EACrBM,MAAM,CAACN,SAAS,CAAC,GAAGR,SAAS,CAACQ,SAAS,EAAEP,OAAO,CAAC;EAEjD,SAASe,IAAIA,CAAA,EAAG;IACd,IAAIL,OAAO,CAACD,MAAM,KAAK,CAAC,EAAE;MACxB;MACAO,eAAe,CAACL,QAAQ,EAAEJ,SAAS,EAAEP,OAAO,CAAC;MAC7C;IACF;;IAEA;IACA,IAAIiB,WAAW,GAAGP,OAAO,CAACQ,MAAM,CAAC,CAACC,QAAQ,EAAE3B,IAAI,KAAK;MACnD,OAAOqB,MAAM,CAACrB,IAAI,CAAC,GAAGqB,MAAM,CAACM,QAAQ,CAAC,GAAG3B,IAAI,GAAG2B,QAAQ;IAC1D,CAAC,CAAC;IAEF,IAAIF,WAAW,CAACG,QAAQ,CAAC,CAAC,KAAKpB,OAAO,CAACoB,QAAQ,CAAC,CAAC,EAAE;MACjDJ,eAAe,CAACL,QAAQ,EAAEJ,SAAS,EAAEP,OAAO,CAAC;MAC7C;IACF;IAEAU,OAAO,GAAGA,OAAO,CAACW,MAAM,CACrB7B,IAAI,IAAKA,IAAI,CAAC4B,QAAQ,CAAC,CAAC,KAAKH,WAAW,CAACG,QAAQ,CAAC,CACrD,CAAC;IAED,MAAME,OAAO,GAAGhB,IAAI,CAACiB,KAAK,CAAC,CAAC;IAC5BD,OAAO,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACO,SAAS,GAAG,IAAI;IACxDhB,OAAO,CAACc,OAAO,CAAC;;IAEhB;IACA/B,YAAY,CAAC0B,WAAW,EAAExB,IAAI,EAAEC,IAAI,CAAC,CAAC+B,OAAO,CAAEC,QAAQ,IAAK;MAC1D,IAAIC,eAAe,GAAGf,MAAM,CAACK,WAAW,CAAC,GAAG,CAAC;MAE7C,IAAIU,eAAe,GAAGf,MAAM,CAACc,QAAQ,CAAC,EAAE;QACtCf,QAAQ,CAACe,QAAQ,CAAC,GAAGT,WAAW;QAChCL,MAAM,CAACc,QAAQ,CAAC,GAAGC,eAAe;QAClCd,MAAM,CAACa,QAAQ,CAAC,GAAGd,MAAM,CAACc,QAAQ,CAAC,GAAG3B,SAAS,CAAC2B,QAAQ,EAAE1B,OAAO,CAAC;QAElE,IAAI,CAACU,OAAO,CAACkB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACT,QAAQ,CAAC,CAAC,KAAKM,QAAQ,CAACN,QAAQ,CAAC,CAAC,CAAC,EAAE;UAC9DV,OAAO,CAACZ,IAAI,CAAC4B,QAAQ,CAAC;QACxB;MACF;IACF,CAAC,CAAC;IAEFI,UAAU,CAACf,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;EACxB;EAEA,SAASC,eAAeA,CAACL,QAAQ,EAAEJ,SAAS,EAAEP,OAAO,EAAE;IACrD,IAAIiB,WAAW,GAAGjB,OAAO;IACzB,MAAMsB,OAAO,GAAGhB,IAAI,CAACyB,GAAG,CAAEpC,GAAG,IAC3BA,GAAG,CAACoC,GAAG,CAAEvC,IAAI,KAAM;MACjB,GAAGA,IAAI;MACPwC,MAAM,EAAE;IACV,CAAC,CAAC,CACJ,CAAC;IACD,OAAOf,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,CAAC,KAAKb,SAAS,CAACa,QAAQ,CAAC,CAAC,EAAE;MACrE,IAAIH,WAAW,KAAKjB,OAAO,EAAE;QAC3BsB,OAAO,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACe,MAAM,GAAG,IAAI;MACvD;MACAf,WAAW,GAAGN,QAAQ,CAACM,WAAW,CAAC;IACrC;IACAT,OAAO,CAACc,OAAO,CAAC;EAClB;EAEAP,IAAI,CAAC,CAAC;AACR,CAAC;AAACkB,EAAA,GAhFI5B,KAAK;AAkFX,eAAeA,KAAK;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}