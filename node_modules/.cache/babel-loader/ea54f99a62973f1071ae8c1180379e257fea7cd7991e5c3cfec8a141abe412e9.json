{"ast":null,"code":"var _jsxFileName = \"/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const rows = 20;\n  const cols = 20;\n  const START_NODE = [9, 0];\n  const END_NODE = [rows - 1, cols - 1];\n  const createGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === START_NODE[0] && col === START_NODE[1],\n          isEnd: row === END_NODE[0] && col === END_NODE[1],\n          isVisited: false,\n          isPath: false\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  const [grid, setGrid] = useState(createGrid());\n  const getNeighbors = node => {\n    const [row, col] = node;\n    const neighbors = [];\n    if (row > 0) neighbors.push([row - 1, col]);\n    if (row < rows - 1) neighbors.push([row + 1, col]);\n    if (col > 0) neighbors.push([row, col - 1]);\n    if (col < cols - 1) neighbors.push([row, col + 1]);\n    return neighbors;\n  };\n  const heuristic = (a, b) => {\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n  };\n  const aStar = (grid, setGrid, startNode, endNode) => {\n    let openSet = [startNode];\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n    gScore[startNode] = 0;\n    fScore[startNode] = heuristic(startNode, endNode);\n    function step() {\n      if (openSet.length === 0) return;\n      openSet.sort((a, b) => fScore[a] - fScore[b]);\n      let currentNode = openSet.shift();\n      if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n        reconstructPath(cameFrom, currentNode);\n        return;\n      }\n      getNeighbors(currentNode).forEach(neighbor => {\n        let tentativeGScore = gScore[currentNode] + 1;\n        if (!gScore[neighbor] || tentativeGScore < gScore[neighbor]) {\n          cameFrom[neighbor] = currentNode;\n          gScore[neighbor] = tentativeGScore;\n          fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n          if (!openSet.includes(neighbor)) openSet.push(neighbor);\n        }\n      });\n      const newGrid = grid.slice();\n      newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n      setGrid(newGrid);\n      setTimeout(step, 50); // Animation delay\n    }\n    function reconstructPath(cameFrom, currentNode) {\n      const newGrid = grid.slice();\n      const path = [currentNode];\n      while (cameFrom[currentNode]) {\n        currentNode = cameFrom[currentNode];\n        path.unshift(currentNode);\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      setGrid(newGrid);\n    }\n    step();\n  };\n  const startAlgorithm = () => {\n    aStar(grid, setGrid, START_NODE, END_NODE);\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        if (grid[row][col].isPath) {\n          console.log(row, col);\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfinding Algorithm Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startAlgorithm,\n      children: \"Start Algorithm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${node.isVisited ? \"visited\" : \"\"} \n                  ${node.isPath ? \"path\" : \"\"}`\n        }, nodeIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"k45KhAHyeMFCAVfeZZDkYL+FetI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","rows","cols","START_NODE","END_NODE","createGrid","grid","row","currentRow","col","push","isStart","isEnd","isVisited","isPath","setGrid","getNeighbors","node","neighbors","heuristic","a","b","Math","abs","aStar","startNode","endNode","openSet","cameFrom","gScore","fScore","step","length","sort","currentNode","shift","reconstructPath","forEach","neighbor","tentativeGScore","includes","newGrid","slice","setTimeout","path","unshift","startAlgorithm","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","rowIdx","nodeIdx","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const rows = 20;\n  const cols = 20;\n  const START_NODE = [9, 0];\n  const END_NODE = [rows - 1, cols - 1];\n\n  const createGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push({\n          row,\n          col,\n          isStart: row === START_NODE[0] && col === START_NODE[1],\n          isEnd: row === END_NODE[0] && col === END_NODE[1],\n          isVisited: false,\n          isPath: false,\n        });\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const [grid, setGrid] = useState(createGrid());\n\n  const getNeighbors = (node) => {\n    const [row, col] = node;\n    const neighbors = [];\n    if (row > 0) neighbors.push([row - 1, col]);\n    if (row < rows - 1) neighbors.push([row + 1, col]);\n    if (col > 0) neighbors.push([row, col - 1]);\n    if (col < cols - 1) neighbors.push([row, col + 1]);\n    return neighbors;\n  };\n\n  const heuristic = (a, b) => {\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n  };\n\n  const aStar = (grid, setGrid, startNode, endNode) => {\n    let openSet = [startNode];\n    let cameFrom = {};\n    let gScore = {};\n    let fScore = {};\n\n    gScore[startNode] = 0;\n    fScore[startNode] = heuristic(startNode, endNode);\n\n    function step() {\n      if (openSet.length === 0) return;\n\n      openSet.sort((a, b) => fScore[a] - fScore[b]);\n      let currentNode = openSet.shift();\n\n      if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n        reconstructPath(cameFrom, currentNode);\n        return;\n      }\n\n      getNeighbors(currentNode).forEach((neighbor) => {\n        let tentativeGScore = gScore[currentNode] + 1;\n\n        if (!gScore[neighbor] || tentativeGScore < gScore[neighbor]) {\n          cameFrom[neighbor] = currentNode;\n          gScore[neighbor] = tentativeGScore;\n          fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n          if (!openSet.includes(neighbor)) openSet.push(neighbor);\n        }\n      });\n\n      const newGrid = grid.slice();\n      newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n      setGrid(newGrid);\n\n      setTimeout(step, 50); // Animation delay\n    }\n\n    function reconstructPath(cameFrom, currentNode) {\n      const newGrid = grid.slice();\n      const path = [currentNode];\n      while (cameFrom[currentNode]) {\n        currentNode = cameFrom[currentNode];\n        path.unshift(currentNode);\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      setGrid(newGrid);\n    }\n    step();\n  };\n\n  const startAlgorithm = () => {\n    aStar(grid, setGrid, START_NODE, END_NODE);\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        if (grid[row][col].isPath) {\n          console.log(row, col);\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Pathfinding Algorithm Visualizer</h1>\n      <button onClick={startAlgorithm}>Start Algorithm</button>\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"grid-row\">\n            {row.map((node, nodeIdx) => (\n              <div\n                key={nodeIdx}\n                className={`node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${node.isVisited ? \"visited\" : \"\"} \n                  ${node.isPath ? \"path\" : \"\"}`}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}