{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst Dijkstras = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      reconstructPath(cameFrom, startNode, endNode);\n      if (onComplete) onComplete(); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n    if (currentNode.toString() === endNode.toString()) {\n      reconstructPath(cameFrom, startNode, endNode);\n      if (onComplete) onComplete(); // Signal completion\n      return;\n    }\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some(n => n[0] === neighbor[0] && n[1] === neighbor[1])) openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n  }\n  step();\n};\n_c = Dijkstras;\nexport default Dijkstras;\nvar _c;\n$RefreshReg$(_c, \"Dijkstras\");","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","Dijkstras","grid","startNode","endNode","setGrid","onComplete","length","openSet","cameFrom","gScore","Infinity","step","reconstructPath","currentNode","shift","newGrid","slice","isVisited","toString","forEach","neighbor","tentativeGScore","some","n","setTimeout","map","isPath","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/Dijkstras.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\nconst Dijkstras = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      reconstructPath(cameFrom, startNode, endNode);\n      if (onComplete) onComplete(); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    if (currentNode.toString() === endNode.toString()) {\n      reconstructPath(cameFrom, startNode, endNode);\n      if (onComplete) onComplete(); // Signal completion\n      return;\n    }\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some((n) => n[0] === neighbor[0] && n[1] === neighbor[1]))\n          openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n  }\n\n  step();\n};\n\nexport default Dijkstras;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACzC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGJ,IAAI;EACvB,MAAMK,SAAS,GAAG,EAAE;EACpB,IAAIF,GAAG,GAAG,CAAC,EAAEE,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;EAC3C,IAAID,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEI,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC;EAClD,IAAIA,GAAG,GAAG,CAAC,EAAEC,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3C,IAAIA,GAAG,GAAGF,IAAI,GAAG,CAAC,EAAEG,SAAS,CAACC,IAAI,CAAC,CAACH,GAAG,EAAEC,GAAG,GAAG,CAAC,CAAC,CAAC;EAClD,OAAOC,SAAS;AAClB,CAAC;AAED,MAAME,SAAS,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,KAAK;EACnE,MAAMX,IAAI,GAAGO,IAAI,CAACK,MAAM;EACxB,MAAMX,IAAI,GAAGM,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM;EAE3B,IAAIC,OAAO,GAAG,CAACL,SAAS,CAAC;EACzB,IAAIM,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,KAAK,IAAIb,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,EAAEE,GAAG,EAAE,EAAE;MACnCY,MAAM,CAAC,CAACb,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGa,QAAQ;IAC/B;EACF;EACAD,MAAM,CAACP,SAAS,CAAC,GAAG,CAAC;EAErB,SAASS,IAAIA,CAAA,EAAG;IACd,IAAIJ,OAAO,CAACD,MAAM,KAAK,CAAC,EAAE;MACxB;MACAM,eAAe,CAACJ,QAAQ,EAAEN,SAAS,EAAEC,OAAO,CAAC;MAC7C,IAAIE,UAAU,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;MAC9B;IACF;;IAEA;IACA,IAAIQ,WAAW,GAAGN,OAAO,CAACO,KAAK,CAAC,CAAC;IACjC,MAAMC,OAAO,GAAGd,IAAI,CAACe,KAAK,CAAC,CAAC;IAC5BD,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACI,SAAS,GAAG,IAAI;IACxDb,OAAO,CAACW,OAAO,CAAC;IAEhB,IAAIF,WAAW,CAACK,QAAQ,CAAC,CAAC,KAAKf,OAAO,CAACe,QAAQ,CAAC,CAAC,EAAE;MACjDN,eAAe,CAACJ,QAAQ,EAAEN,SAAS,EAAEC,OAAO,CAAC;MAC7C,IAAIE,UAAU,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;MAC9B;IACF;;IAEA;IACAb,YAAY,CAACqB,WAAW,EAAEnB,IAAI,EAAEC,IAAI,CAAC,CAACwB,OAAO,CAAEC,QAAQ,IAAK;MAC1D,IAAIC,eAAe,GAAGZ,MAAM,CAACI,WAAW,CAAC,GAAG,CAAC;MAE7C,IAAIQ,eAAe,GAAGZ,MAAM,CAACW,QAAQ,CAAC,EAAE;QACtCZ,QAAQ,CAACY,QAAQ,CAAC,GAAGP,WAAW;QAChCJ,MAAM,CAACW,QAAQ,CAAC,GAAGC,eAAe;QAClC,IAAI,CAACd,OAAO,CAACe,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,KAAKH,QAAQ,CAAC,CAAC,CAAC,IAAIG,CAAC,CAAC,CAAC,CAAC,KAAKH,QAAQ,CAAC,CAAC,CAAC,CAAC,EACpEb,OAAO,CAACR,IAAI,CAACqB,QAAQ,CAAC;MAC1B;IACF,CAAC,CAAC;IACFI,UAAU,CAACb,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;EACxB;EAEA,SAASC,eAAeA,CAACJ,QAAQ,EAAEN,SAAS,EAAEC,OAAO,EAAE;IACrD,IAAIU,WAAW,GAAGV,OAAO;IACzB,MAAMY,OAAO,GAAGd,IAAI,CAACwB,GAAG,CAAE7B,GAAG,IAC3BA,GAAG,CAAC6B,GAAG,CAAEhC,IAAI,KAAM;MACjB,GAAGA,IAAI;MACPiC,MAAM,EAAE;IACV,CAAC,CAAC,CACJ,CAAC;IACD,OAAOb,WAAW,IAAIA,WAAW,CAACK,QAAQ,CAAC,CAAC,KAAKhB,SAAS,CAACgB,QAAQ,CAAC,CAAC,EAAE;MACrE,IAAIL,WAAW,KAAKV,OAAO,EAAE;QAC3BY,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACa,MAAM,GAAG,IAAI;MACvD;MACAb,WAAW,GAAGL,QAAQ,CAACK,WAAW,CAAC;IACrC;IACAT,OAAO,CAACW,OAAO,CAAC;EAClB;EAEAJ,IAAI,CAAC,CAAC;AACR,CAAC;AAACgB,EAAA,GApEI3B,SAAS;AAsEf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}