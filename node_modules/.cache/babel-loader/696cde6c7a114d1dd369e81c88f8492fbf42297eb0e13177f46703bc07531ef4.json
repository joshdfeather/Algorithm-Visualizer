{"ast":null,"code":"const AStar = (grid, startNode, endNode, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n        if (!openSet.some(n => n[0] === neighbor[0] && n[1] === neighbor[1])) openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n    return pathLength;\n  }\n  function heuristic(node, endNode) {\n    const [x1, y1] = node;\n    const [x2, y2] = endNode;\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2); // Manhattan distance\n  }\n  step();\n};\n_c = AStar;\nvar _c;\n$RefreshReg$(_c, \"AStar\");","map":{"version":3,"names":["AStar","grid","startNode","endNode","onComplete","rows","length","cols","openSet","cameFrom","gScore","fScore","metrics","pathLength","nodesVisited","row","col","Infinity","heuristic","step","reconstructPath","currentNode","shift","newGrid","slice","isVisited","setGrid","getNeighbors","forEach","neighbor","tentativeGScore","some","n","push","setTimeout","map","node","isPath","toString","x1","y1","x2","y2","Math","abs","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/AStar.js"],"sourcesContent":["const AStar = (grid, startNode, endNode, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  let metrics = { pathLength: 0, nodesVisited: 0 };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n      fScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      metrics.pathLength = reconstructPath(cameFrom, startNode, endNode, grid);\n      if (onComplete) onComplete(grid, metrics); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = gScore[neighbor] + heuristic(neighbor, endNode);\n        if (!openSet.some((n) => n[0] === neighbor[0] && n[1] === neighbor[1]))\n          openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n    return pathLength;\n  }\n\n  function heuristic(node, endNode) {\n    const [x1, y1] = node;\n    const [x2, y2] = endNode;\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2); // Manhattan distance\n  }\n\n  step();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}