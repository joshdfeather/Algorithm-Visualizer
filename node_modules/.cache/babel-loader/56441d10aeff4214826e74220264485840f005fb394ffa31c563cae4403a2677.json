{"ast":null,"code":"const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst Dijkstras = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0,\n    runtime: 0\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  const startTime = Date.now();\n  function step() {\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    if (currentNode.toString() === endNode.toString()) {\n      const {\n        newGrid,\n        pathLength\n      } = reconstructPath(cameFrom, startNode, endNode, grid);\n      metrics.runtime = (Date.now() - startTime) / 1000; // runtime in seconds\n      metrics.pathLength = pathLength;\n      onComplete(newGrid, metrics); // Signal completion\n      return;\n    }\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      const [nRow, nCol] = neighbor;\n\n      // Skip neighbors that are walls\n      if (grid[nRow][nCol].isWall) return;\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some(n => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n    setTimeout(step, 20); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    return {\n      newGrid,\n      pathLength\n    };\n  }\n  step();\n};\n_c = Dijkstras;\nexport default Dijkstras;\nvar _c;\n$RefreshReg$(_c, \"Dijkstras\");","map":{"version":3,"names":["getNeighbors","node","rows","cols","row","col","neighbors","push","Dijkstras","grid","startNode","endNode","setGrid","onComplete","length","openSet","cameFrom","gScore","metrics","pathLength","nodesVisited","runtime","Infinity","startTime","Date","now","step","currentNode","shift","toString","newGrid","reconstructPath","slice","isVisited","forEach","neighbor","nRow","nCol","isWall","tentativeGScore","some","n","setTimeout","map","isPath","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/Dijkstras.js"],"sourcesContent":["const getNeighbors = (node, rows, cols) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\nconst Dijkstras = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let metrics = {\n    pathLength: 0,\n    nodesVisited: 0,\n    runtime: 0,\n  };\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n\n  const startTime = Date.now();\n\n  function step() {\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    if (currentNode.toString() === endNode.toString()) {\n      const { newGrid, pathLength } = reconstructPath(\n        cameFrom,\n        startNode,\n        endNode,\n        grid\n      );\n      metrics.runtime = (Date.now() - startTime) / 1000; // runtime in seconds\n      metrics.pathLength = pathLength;\n      onComplete(newGrid, metrics); // Signal completion\n      return;\n    }\n\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    metrics.nodesVisited++;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      const [nRow, nCol] = neighbor;\n\n      // Skip neighbors that are walls\n      if (grid[nRow][nCol].isWall) return;\n\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n\n        if (!openSet.some((n) => n.toString() === neighbor.toString())) {\n          openSet.push(neighbor);\n        }\n      }\n    });\n    setTimeout(step, 20); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode, grid) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    let pathLength = 0;\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n        pathLength++;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    return { newGrid, pathLength };\n  }\n\n  step();\n};\n\nexport default Dijkstras;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}