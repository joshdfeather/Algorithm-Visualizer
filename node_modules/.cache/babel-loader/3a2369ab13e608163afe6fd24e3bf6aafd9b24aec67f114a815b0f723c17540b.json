{"ast":null,"code":"var _jsxFileName = \"/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rows = 20;\nconst cols = 20;\nconst START_NODE = [0, 0];\nconst END_NODE = [rows - 1, cols - 1];\nconst createGrid = () => {\n  const grid = [];\n  for (let row = 0; row < rows; row++) {\n    const currentRow = [];\n    for (let col = 0; col < cols; col++) {\n      currentRow.push({\n        row,\n        col,\n        isStart: row === START_NODE[0] && col === START_NODE[1],\n        isEnd: row === END_NODE[0] && col === END_NODE[1],\n        isVisited: false,\n        isPath: false\n      });\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst getNeighbors = node => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\nconst heuristic = (a, b) => {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n};\nconst aStar = (grid, setGrid, startNode, endNode) => {\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n  function step() {\n    if (openSet.length === 0) return;\n    openSet.sort((a, b) => fScore[a] - fScore[b]);\n    let currentNode = openSet.shift();\n    if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n      reconstructPath(cameFrom, currentNode);\n      return;\n    }\n    getNeighbors(currentNode).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (!gScore[neighbor] || tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, currentNode) {\n    const newGrid = grid.slice();\n    const path = [currentNode];\n    while (cameFrom[currentNode]) {\n      currentNode = cameFrom[currentNode];\n      path.unshift(currentNode);\n      newGrid[currentNode[0]][currentNode[1]].isPath = true;\n    }\n    setGrid(newGrid);\n  }\n  step();\n};\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(createGrid());\n  const startAlgorithm = () => {\n    aStar(grid, setGrid, START_NODE, END_NODE);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfinding Algorithm Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startAlgorithm,\n      children: \"Start Algorithm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${node.isVisited ? \"visited\" : \"\"} \n                  ${node.isPath ? \"path\" : \"\"}`\n        }, nodeIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"k45KhAHyeMFCAVfeZZDkYL+FetI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","rows","cols","START_NODE","END_NODE","createGrid","grid","row","currentRow","col","push","isStart","isEnd","isVisited","isPath","getNeighbors","node","neighbors","heuristic","a","b","Math","abs","aStar","setGrid","startNode","endNode","openSet","cameFrom","gScore","fScore","step","length","sort","currentNode","shift","reconstructPath","forEach","neighbor","tentativeGScore","includes","newGrid","slice","setTimeout","path","unshift","App","_s","startAlgorithm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","rowIdx","nodeIdx","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst rows = 20;\nconst cols = 20;\nconst START_NODE = [0, 0];\nconst END_NODE = [rows - 1, cols - 1];\n\nconst createGrid = () => {\n  const grid = [];\n  for (let row = 0; row < rows; row++) {\n    const currentRow = [];\n    for (let col = 0; col < cols; col++) {\n      currentRow.push({\n        row,\n        col,\n        isStart: row === START_NODE[0] && col === START_NODE[1],\n        isEnd: row === END_NODE[0] && col === END_NODE[1],\n        isVisited: false,\n        isPath: false,\n      });\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst getNeighbors = (node) => {\n  const [row, col] = node;\n  const neighbors = [];\n  if (row > 0) neighbors.push([row - 1, col]);\n  if (row < rows - 1) neighbors.push([row + 1, col]);\n  if (col > 0) neighbors.push([row, col - 1]);\n  if (col < cols - 1) neighbors.push([row, col + 1]);\n  return neighbors;\n};\n\nconst heuristic = (a, b) => {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n};\n\nconst aStar = (grid, setGrid, startNode, endNode) => {\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n  let fScore = {};\n\n  gScore[startNode] = 0;\n  fScore[startNode] = heuristic(startNode, endNode);\n\n  function step() {\n    if (openSet.length === 0) return;\n\n    openSet.sort((a, b) => fScore[a] - fScore[b]);\n    let currentNode = openSet.shift();\n\n    if (currentNode[0] === endNode[0] && currentNode[1] === endNode[1]) {\n      reconstructPath(cameFrom, currentNode);\n      return;\n    }\n\n    getNeighbors(currentNode).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (!gScore[neighbor] || tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        fScore[neighbor] = tentativeGScore + heuristic(neighbor, endNode);\n        if (!openSet.includes(neighbor)) openSet.push(neighbor);\n      }\n    });\n\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, currentNode) {\n    const newGrid = grid.slice();\n    const path = [currentNode];\n    while (cameFrom[currentNode]) {\n      currentNode = cameFrom[currentNode];\n      path.unshift(currentNode);\n      newGrid[currentNode[0]][currentNode[1]].isPath = true;\n    }\n    setGrid(newGrid);\n  }\n\n  step();\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(createGrid());\n\n  const startAlgorithm = () => {\n    aStar(grid, setGrid, START_NODE, END_NODE);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Pathfinding Algorithm Visualizer</h1>\n      <button onClick={startAlgorithm}>Start Algorithm</button>\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"grid-row\">\n            {row.map((node, nodeIdx) => (\n              <div\n                key={nodeIdx}\n                className={`node \n                  ${node.isStart ? \"start\" : \"\"} \n                  ${node.isEnd ? \"end\" : \"\"} \n                  ${node.isVisited ? \"visited\" : \"\"} \n                  ${node.isPath ? \"path\" : \"\"}`}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,IAAI,GAAG,EAAE;AACf,MAAMC,IAAI,GAAG,EAAE;AACf,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACzB,MAAMC,QAAQ,GAAG,CAACH,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,CAAC;AAErC,MAAMG,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGN,IAAI,EAAEM,GAAG,EAAE,EAAE;IACnC,MAAMC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGP,IAAI,EAAEO,GAAG,EAAE,EAAE;MACnCD,UAAU,CAACE,IAAI,CAAC;QACdH,GAAG;QACHE,GAAG;QACHE,OAAO,EAAEJ,GAAG,KAAKJ,UAAU,CAAC,CAAC,CAAC,IAAIM,GAAG,KAAKN,UAAU,CAAC,CAAC,CAAC;QACvDS,KAAK,EAAEL,GAAG,KAAKH,QAAQ,CAAC,CAAC,CAAC,IAAIK,GAAG,KAAKL,QAAQ,CAAC,CAAC,CAAC;QACjDS,SAAS,EAAE,KAAK;QAChBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;IACAR,IAAI,CAACI,IAAI,CAACF,UAAU,CAAC;EACvB;EACA,OAAOF,IAAI;AACb,CAAC;AAED,MAAMS,YAAY,GAAIC,IAAI,IAAK;EAC7B,MAAM,CAACT,GAAG,EAAEE,GAAG,CAAC,GAAGO,IAAI;EACvB,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAIV,GAAG,GAAG,CAAC,EAAEU,SAAS,CAACP,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEE,GAAG,CAAC,CAAC;EAC3C,IAAIF,GAAG,GAAGN,IAAI,GAAG,CAAC,EAAEgB,SAAS,CAACP,IAAI,CAAC,CAACH,GAAG,GAAG,CAAC,EAAEE,GAAG,CAAC,CAAC;EAClD,IAAIA,GAAG,GAAG,CAAC,EAAEQ,SAAS,CAACP,IAAI,CAAC,CAACH,GAAG,EAAEE,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3C,IAAIA,GAAG,GAAGP,IAAI,GAAG,CAAC,EAAEe,SAAS,CAACP,IAAI,CAAC,CAACH,GAAG,EAAEE,GAAG,GAAG,CAAC,CAAC,CAAC;EAClD,OAAOQ,SAAS;AAClB,CAAC;AAED,MAAMC,SAAS,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC1B,OAAOC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAMG,KAAK,GAAGA,CAACjB,IAAI,EAAEkB,OAAO,EAAEC,SAAS,EAAEC,OAAO,KAAK;EACnD,IAAIC,OAAO,GAAG,CAACF,SAAS,CAAC;EACzB,IAAIG,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,MAAM,GAAG,CAAC,CAAC;EAEfD,MAAM,CAACJ,SAAS,CAAC,GAAG,CAAC;EACrBK,MAAM,CAACL,SAAS,CAAC,GAAGP,SAAS,CAACO,SAAS,EAAEC,OAAO,CAAC;EAEjD,SAASK,IAAIA,CAAA,EAAG;IACd,IAAIJ,OAAO,CAACK,MAAM,KAAK,CAAC,EAAE;IAE1BL,OAAO,CAACM,IAAI,CAAC,CAACd,CAAC,EAAEC,CAAC,KAAKU,MAAM,CAACX,CAAC,CAAC,GAAGW,MAAM,CAACV,CAAC,CAAC,CAAC;IAC7C,IAAIc,WAAW,GAAGP,OAAO,CAACQ,KAAK,CAAC,CAAC;IAEjC,IAAID,WAAW,CAAC,CAAC,CAAC,KAAKR,OAAO,CAAC,CAAC,CAAC,IAAIQ,WAAW,CAAC,CAAC,CAAC,KAAKR,OAAO,CAAC,CAAC,CAAC,EAAE;MAClEU,eAAe,CAACR,QAAQ,EAAEM,WAAW,CAAC;MACtC;IACF;IAEAnB,YAAY,CAACmB,WAAW,CAAC,CAACG,OAAO,CAAEC,QAAQ,IAAK;MAC9C,IAAIC,eAAe,GAAGV,MAAM,CAACK,WAAW,CAAC,GAAG,CAAC;MAE7C,IAAI,CAACL,MAAM,CAACS,QAAQ,CAAC,IAAIC,eAAe,GAAGV,MAAM,CAACS,QAAQ,CAAC,EAAE;QAC3DV,QAAQ,CAACU,QAAQ,CAAC,GAAGJ,WAAW;QAChCL,MAAM,CAACS,QAAQ,CAAC,GAAGC,eAAe;QAClCT,MAAM,CAACQ,QAAQ,CAAC,GAAGC,eAAe,GAAGrB,SAAS,CAACoB,QAAQ,EAAEZ,OAAO,CAAC;QACjE,IAAI,CAACC,OAAO,CAACa,QAAQ,CAACF,QAAQ,CAAC,EAAEX,OAAO,CAACjB,IAAI,CAAC4B,QAAQ,CAAC;MACzD;IACF,CAAC,CAAC;IAEF,MAAMG,OAAO,GAAGnC,IAAI,CAACoC,KAAK,CAAC,CAAC;IAC5BD,OAAO,CAACP,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACrB,SAAS,GAAG,IAAI;IACxDW,OAAO,CAACiB,OAAO,CAAC;IAEhBE,UAAU,CAACZ,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;EACxB;EAEA,SAASK,eAAeA,CAACR,QAAQ,EAAEM,WAAW,EAAE;IAC9C,MAAMO,OAAO,GAAGnC,IAAI,CAACoC,KAAK,CAAC,CAAC;IAC5B,MAAME,IAAI,GAAG,CAACV,WAAW,CAAC;IAC1B,OAAON,QAAQ,CAACM,WAAW,CAAC,EAAE;MAC5BA,WAAW,GAAGN,QAAQ,CAACM,WAAW,CAAC;MACnCU,IAAI,CAACC,OAAO,CAACX,WAAW,CAAC;MACzBO,OAAO,CAACP,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACpB,MAAM,GAAG,IAAI;IACvD;IACAU,OAAO,CAACiB,OAAO,CAAC;EAClB;EAEAV,IAAI,CAAC,CAAC;AACR,CAAC;AAED,SAASe,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACzC,IAAI,EAAEkB,OAAO,CAAC,GAAG1B,QAAQ,CAACO,UAAU,CAAC,CAAC,CAAC;EAE9C,MAAM2C,cAAc,GAAGA,CAAA,KAAM;IAC3BzB,KAAK,CAACjB,IAAI,EAAEkB,OAAO,EAAErB,UAAU,EAAEC,QAAQ,CAAC;EAC5C,CAAC;EAED,oBACEJ,OAAA;IAAKiD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlD,OAAA;MAAAkD,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzCtD,OAAA;MAAQuD,OAAO,EAAEP,cAAe;MAAAE,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzDtD,OAAA;MAAKiD,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClB5C,IAAI,CAACkD,GAAG,CAAC,CAACjD,GAAG,EAAEkD,MAAM,kBACpBzD,OAAA;QAAkBiD,SAAS,EAAC,UAAU;QAAAC,QAAA,EACnC3C,GAAG,CAACiD,GAAG,CAAC,CAACxC,IAAI,EAAE0C,OAAO,kBACrB1D,OAAA;UAEEiD,SAAS,EAAE;AAC3B,oBAAoBjC,IAAI,CAACL,OAAO,GAAG,OAAO,GAAG,EAAE;AAC/C,oBAAoBK,IAAI,CAACJ,KAAK,GAAG,KAAK,GAAG,EAAE;AAC3C,oBAAoBI,IAAI,CAACH,SAAS,GAAG,SAAS,GAAG,EAAE;AACnD,oBAAoBG,IAAI,CAACF,MAAM,GAAG,MAAM,GAAG,EAAE;QAAG,GAL3B4C,OAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMR,CACP;MAAC,GAVMG,MAAM;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACP,EAAA,CA7BQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AA+BZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}