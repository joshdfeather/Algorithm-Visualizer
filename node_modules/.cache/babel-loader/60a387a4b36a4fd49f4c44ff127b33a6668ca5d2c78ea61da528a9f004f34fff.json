{"ast":null,"code":"const Dijkstras = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      reconstructPath(cameFrom, startNode, endNode);\n      if (onComplete) onComplete(); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach(neighbor => {\n      let tentativeGScore = gScore[currentNode] + 1;\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some(n => n[0] === neighbor[0] && n[1] === neighbor[1])) openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n  function reconstructPath(cameFrom, startNode, endNode) {\n    let currentNode = endNode;\n    const newGrid = grid.map(row => row.map(node => ({\n      ...node,\n      isPath: false\n    })));\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n  }\n  step();\n};\n_c = Dijkstras;\nexport default Dijkstras;\nvar _c;\n$RefreshReg$(_c, \"Dijkstras\");","map":{"version":3,"names":["Dijkstras","grid","startNode","endNode","setGrid","onComplete","rows","length","cols","openSet","cameFrom","gScore","row","col","Infinity","step","reconstructPath","currentNode","shift","newGrid","slice","isVisited","getNeighbors","forEach","neighbor","tentativeGScore","some","n","push","setTimeout","map","node","isPath","toString","_c","$RefreshReg$"],"sources":["/Users/joshfeather/Documents/pathfinding-visualizer/src/Dijkstras.js"],"sourcesContent":["const Dijkstras = (grid, startNode, endNode, setGrid, onComplete) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let openSet = [startNode];\n  let cameFrom = {};\n  let gScore = {};\n\n  // Initialize scores\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      gScore[[row, col]] = Infinity;\n    }\n  }\n  gScore[startNode] = 0;\n\n  function step() {\n    if (openSet.length === 0) {\n      // If there are no more nodes to explore, reconstruct the path\n      reconstructPath(cameFrom, startNode, endNode);\n      if (onComplete) onComplete(); // Signal completion\n      return;\n    }\n\n    // Visualize the current node\n    let currentNode = openSet.shift();\n    const newGrid = grid.slice();\n    newGrid[currentNode[0]][currentNode[1]].isVisited = true;\n    setGrid(newGrid);\n\n    // Spread to neighbors\n    getNeighbors(currentNode, rows, cols).forEach((neighbor) => {\n      let tentativeGScore = gScore[currentNode] + 1;\n\n      if (tentativeGScore < gScore[neighbor]) {\n        cameFrom[neighbor] = currentNode;\n        gScore[neighbor] = tentativeGScore;\n        if (!openSet.some((n) => n[0] === neighbor[0] && n[1] === neighbor[1]))\n          openSet.push(neighbor);\n      }\n    });\n    setTimeout(step, 50); // Animation delay\n  }\n\n  function reconstructPath(cameFrom, startNode, endNode) {\n    let currentNode = endNode;\n    const newGrid = grid.map((row) =>\n      row.map((node) => ({\n        ...node,\n        isPath: false,\n      }))\n    );\n    while (currentNode && currentNode.toString() !== startNode.toString()) {\n      if (currentNode !== endNode) {\n        newGrid[currentNode[0]][currentNode[1]].isPath = true;\n      }\n      currentNode = cameFrom[currentNode];\n    }\n    setGrid(newGrid);\n  }\n\n  step();\n};\n\nexport default Dijkstras;\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,KAAK;EACnE,MAAMC,IAAI,GAAGL,IAAI,CAACM,MAAM;EACxB,MAAMC,IAAI,GAAGP,IAAI,CAAC,CAAC,CAAC,CAACM,MAAM;EAE3B,IAAIE,OAAO,GAAG,CAACP,SAAS,CAAC;EACzB,IAAIQ,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGN,IAAI,EAAEM,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,IAAI,EAAEK,GAAG,EAAE,EAAE;MACnCF,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,CAAC,GAAGC,QAAQ;IAC/B;EACF;EACAH,MAAM,CAACT,SAAS,CAAC,GAAG,CAAC;EAErB,SAASa,IAAIA,CAAA,EAAG;IACd,IAAIN,OAAO,CAACF,MAAM,KAAK,CAAC,EAAE;MACxB;MACAS,eAAe,CAACN,QAAQ,EAAER,SAAS,EAAEC,OAAO,CAAC;MAC7C,IAAIE,UAAU,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;MAC9B;IACF;;IAEA;IACA,IAAIY,WAAW,GAAGR,OAAO,CAACS,KAAK,CAAC,CAAC;IACjC,MAAMC,OAAO,GAAGlB,IAAI,CAACmB,KAAK,CAAC,CAAC;IAC5BD,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACI,SAAS,GAAG,IAAI;IACxDjB,OAAO,CAACe,OAAO,CAAC;;IAEhB;IACAG,YAAY,CAACL,WAAW,EAAEX,IAAI,EAAEE,IAAI,CAAC,CAACe,OAAO,CAAEC,QAAQ,IAAK;MAC1D,IAAIC,eAAe,GAAGd,MAAM,CAACM,WAAW,CAAC,GAAG,CAAC;MAE7C,IAAIQ,eAAe,GAAGd,MAAM,CAACa,QAAQ,CAAC,EAAE;QACtCd,QAAQ,CAACc,QAAQ,CAAC,GAAGP,WAAW;QAChCN,MAAM,CAACa,QAAQ,CAAC,GAAGC,eAAe;QAClC,IAAI,CAAChB,OAAO,CAACiB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,KAAKH,QAAQ,CAAC,CAAC,CAAC,IAAIG,CAAC,CAAC,CAAC,CAAC,KAAKH,QAAQ,CAAC,CAAC,CAAC,CAAC,EACpEf,OAAO,CAACmB,IAAI,CAACJ,QAAQ,CAAC;MAC1B;IACF,CAAC,CAAC;IACFK,UAAU,CAACd,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;EACxB;EAEA,SAASC,eAAeA,CAACN,QAAQ,EAAER,SAAS,EAAEC,OAAO,EAAE;IACrD,IAAIc,WAAW,GAAGd,OAAO;IACzB,MAAMgB,OAAO,GAAGlB,IAAI,CAAC6B,GAAG,CAAElB,GAAG,IAC3BA,GAAG,CAACkB,GAAG,CAAEC,IAAI,KAAM;MACjB,GAAGA,IAAI;MACPC,MAAM,EAAE;IACV,CAAC,CAAC,CACJ,CAAC;IACD,OAAOf,WAAW,IAAIA,WAAW,CAACgB,QAAQ,CAAC,CAAC,KAAK/B,SAAS,CAAC+B,QAAQ,CAAC,CAAC,EAAE;MACrE,IAAIhB,WAAW,KAAKd,OAAO,EAAE;QAC3BgB,OAAO,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAACA,WAAW,CAAC,CAAC,CAAC,CAAC,CAACe,MAAM,GAAG,IAAI;MACvD;MACAf,WAAW,GAAGP,QAAQ,CAACO,WAAW,CAAC;IACrC;IACAb,OAAO,CAACe,OAAO,CAAC;EAClB;EAEAJ,IAAI,CAAC,CAAC;AACR,CAAC;AAACmB,EAAA,GA9DIlC,SAAS;AAgEf,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}